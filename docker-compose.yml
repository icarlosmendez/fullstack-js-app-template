version: '3.1'
services:
  # Create the Node backend service
  express_server:
    build:
      context: ./express_server/
      dockerfile: express.Dockerfile
    # Define a custom image name
    image: express_server
    restart: always
    # Define port mapping for the dev environment
    ports:
      - "8080:8080"
    # env_file: ./server/.env # TODO - uncomment this to auto-load your .env file!
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    # Bindmount volumes
    volumes:
      - ./express_server/:/usr/app
      - /usr/app/node_modules
    command: /usr/app/node_modules/.bin/nodemon src/index.js

  # Create the React client service
  react_client:
    build:
      context: ./react_client/
      dockerfile: react.Dockerfile
    # Define a custom image name
    image: react_client
    restart: always
    # Define port mapping for the dev environment
    ports:
      - "3000:3000"
    volumes:
      - ./react_client/:/usr/app
      - /usr/app/node_modules
    command: npm start
      
  # Create the Database service.   
  postgres_server:
    build:
      context: ./postgres_server/
      dockerfile: postgres.Dockerfile
    # Define a custom image name
    image: postgres_server
    restart: always
    # Define port mapping for the dev environment
    ports:
      - "5432:5432"
    # Define envars for postgres db.
    environment:
      # Define a username for the superuser
      POSTGRES_USER: dbuser
      # Define a password for the user above
      # The following password should be changed to something more secure before moving to production
      POSTGRES_PASSWORD: dbpass
      # Define a name for the database
      POSTGRES_DB: testdb
      # Define a password for the psql client used on the command line at run time
      # PGPASSWORD: psqlpassword
    # Create volumes to persist data. 
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Bindmount local .sql file to import and test db at launch.
      # Switch this out with your .sql file for dev work.

  # Create the pgadmin service.
  pgadmin:
    build:
      context: ./pgadmin_server/
      dockerfile: pgadmin.Dockerfile
    # Define a custom image name
    image: pgadmin_server
    # Define port mapping for the dev environment
    ports: 
      - "80:80"
    # Define envars for pgadmin. These envars will be used to login to the web u/i at localhost:80
    environment:
      PGADMIN_DEFAULT_EMAIL: calicci.gardachi@gmail.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    # Bindmount local files to import server config and test db at launch.
    volumes:
      # Pre-defined server config details are loaded into pgAdmin upon startup.
      # Provides consistent provisioning across restarts and rebuilds.
      # Changes to servers.json requires a rebuild of the container.
      # Also this is a bindmount and as such does not require a value in the 'volumes' item below.
      - ./pgadmin_server/servers.json:/pgadmin4/servers.json

volumes:
  express_server:
  react_client:
  postgres-data:
  
